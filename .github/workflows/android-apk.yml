name: android-apk

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Java (Android build)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" \
               "ndk;27.1.12297006" "cmake;3.30.5"

      - name: Ensure Buildozer uses modern sdkmanager
        run: |
          set -eux
          SDK="$ANDROID_SDK_ROOT"
          # Remove legacy tools dir if present and point it to cmdline-tools sdkmanager
          sudo rm -rf "$SDK/tools" || true
          sudo mkdir -p "$SDK/tools/bin"
          if [ -x "$SDK/cmdline-tools/latest/bin/sdkmanager" ]; then
            SRC="$SDK/cmdline-tools/latest/bin/sdkmanager"
          else
            SRC_DIR=$(ls -d "$SDK"/cmdline-tools/*/bin 2>/dev/null | head -n1)
            if [ -z "${SRC_DIR:-}" ]; then
              echo "No cmdline-tools found under $SDK/cmdline-tools" >&2
              exit 1
            fi
            SRC="$SRC_DIR/sdkmanager"
          fi
          sudo ln -sf "$SRC" "$SDK/tools/bin/sdkmanager"
          "$SDK/tools/bin/sdkmanager" --version || true

      - name: Install Qt (host tools + Android) via aqtinstall
        run: |
          python -m pip install "aqtinstall>=3.1.0"

          # Desktop (gcc_64) is required for host tools used by pyside6-android-deploy (e.g., rcc, lrelease).
          python -m aqt install-qt linux desktop 6.9.2 linux_gcc_64 --outputdir /opt/Qt

          # Install the Qt for Android kit for arm64-v8a so deploy can link the correct Android libs.
          python -m aqt install-qt linux android 6.9.2 android_arm64_v8a --outputdir /opt/Qt

      - name: Install PySide6 tooling
        run: |
          pip install "PySide6==6.9.2" "PySide6-Addons==6.9.2" "shiboken6==6.9.2"

      - name: Install PySide6 Android deploy requirements
        run: |
          python -m pip install jinja2 pkginfo tqdm "packaging==24.1"

      - name: Build APK (PySide6 Android deploy)
        working-directory: android
        run: |
          export ANDROID_NDK_ROOT="$ANDROID_SDK_ROOT/ndk/27.1.12297006"
          export QT_HOST_PATH="/opt/Qt/6.9.2/gcc_64"
          export PATH="$QT_HOST_PATH/bin:$PATH"
          # Download Android (arm64-v8a) wheels for PySide6 Addons and shiboken6 from Qt official releases
          set -euo pipefail
          PYSIDE_VER=6.9.2
          BASE_URL="https://download.qt.io/official_releases/QtForPython"
          mkdir -p dist-wheels
          fetch_wheel() {
            local pkg_dir="$1"  # e.g. pyside6-addons or shiboken6
            local out_var="$2"  # variable name to export path into
            local index_url="$BASE_URL/$pkg_dir/"
            echo "Fetching index: $index_url" >&2
            local wheel_name
            wheel_name=$(curl -fsSL "$index_url" | \
              grep -Eo '[^" ]+\.whl' | \
              grep -E "${PYSIDE_VER}" | \
              grep -E "android_aarch64" | \
              grep -E "cp311" | \
              head -n1 || true)
            if [ -z "${wheel_name:-}" ]; then
              echo "Could not find Android aarch64 wheel at $index_url" >&2
              return 1
            fi
            echo "Found wheel: $wheel_name" >&2
            curl -fsSL -o "dist-wheels/$wheel_name" "$index_url$wheel_name"
            eval "$out_var=dist-wheels/$wheel_name"
          }
          WHEEL_PYSIDE=""
          WHEEL_PYSIDE_ADDONS=""
          WHEEL_SHIBOKEN=""
          fetch_wheel pyside6 WHEEL_PYSIDE
          fetch_wheel pyside6_addons WHEEL_PYSIDE_ADDONS
          fetch_wheel shiboken6 WHEEL_SHIBOKEN
          echo "Wheels ready: $WHEEL_PYSIDE | $WHEEL_PYSIDE_ADDONS | $WHEEL_SHIBOKEN"

          pyside6-android-deploy \
            -f \
            --name "Surfscape" \
            --sdk-path "$ANDROID_SDK_ROOT" \
            --ndk-path "$ANDROID_NDK_ROOT" \
            --wheel-pyside "$WHEEL_PYSIDE" \
            --wheel-pyside-addons "$WHEEL_PYSIDE_ADDONS" \
            --wheel-shiboken "$WHEEL_SHIBOKEN" \
            --keep-deployment-files \
            -v

          echo "APK artifacts:" && find . -name "*.apk" -o -name "*.aab"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: surfscape-android
          path: |
            **/*.apk
            **/*.aab
